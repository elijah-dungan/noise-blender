'use-strict';

/** special thanks goes to Johan Karisson https://codepen.io/DonKarlssonSan/post/drum-loops-and-effects-with-web-audio-api, MDN https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API, and W3 Schools https://www.w3schools.com/howto/howto_js_rangeslider.asp **/

// global variables

var allSounds = []; // stores all object instances
var audioBufferSourceNodes = []; // stores all audioBufferSourceNodes, values generated by startSounds function
var gainNodes = []; // stores all gainsNodes, values generated by startSounds function
var sliderValues = []; // array for temporarily storing values for localStorage, allows mixer persistence
var gainValues = []; // array for temporarily storing values for localStorage, allows mixer persistence
var audioContext = new AudioContext();
var slidersEl = document.getElementById('slider-container'); // references div element by ID
var allSlidersEl = document.getElementsByClassName('range-sliders'); // returns a node of sliders
var mainSliderEl = document.getElementById('slider-main'); // references main slider element but ID
var playEl = document.getElementById('audio-button-1'); // references button element by ID

// objects

function Sound(name, extension, sliderDefault, volumeDefault) {
  this.name = name;
  this.extension = extension;
  this.filepath = `./audio/${name}.${extension}`;
  this.buffer = '';
  this.sliderDefault = sliderDefault;
  this.volumeDefault = volumeDefault;
  this.fetchAudio = function() {
    fetch(`https://elijah-dungan.github.io/ogg/${this.name}.${this.extension}`) // TODO: change to this.filepath for final deployment
      .then(response => response.arrayBuffer()) // takes response stream and reads it to completion
      .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer)) // asynchronously decodes completely read audio stream
      .then(audioBuffer => { // represents audio asset
        this.buffer = audioBuffer;
      });
  };
  allSounds.push(this);
}

function renderDefaultSounds() {
  var thunder = new Sound('thunder', 'ogg', '100', '0.5');
  var rain = new Sound('rain', 'ogg', '100', '0.5');
  var beach = new Sound('beach', 'ogg', '0', '0');
  var waterfall = new Sound('waterfall', 'ogg', '85', '0.425');
  var stream = new Sound('stream', 'ogg', '100', '0.5');
  var canopy = new Sound('canopy', 'ogg', '0', '0');
  var frogs = new Sound('frogs', 'ogg', '0', '0');
  thunder.fetchAudio();
  rain.fetchAudio();
  beach.fetchAudio();
  waterfall.fetchAudio();
  stream.fetchAudio();
  canopy.fetchAudio();
  frogs.fetchAudio();
}

// helper functions

function clearData() {
  localStorage.clear();
  sliderValues = [];
  gainValues = [];
}

function defaultGainValues() {
  mainSliderEl.value = 50;
  for(var i = 0; i < allSounds.length; i ++) {
    allSlidersEl[i].value = allSounds[i].sliderDefault;
    gainNodes[i].gain.value = allSounds[i].volumeDefault;
  }
}

// event handlers

function enable() { // makes button visible after 1 second timer, allows executables to finish buffering before user can play audio
  if(event.target) {
    setTimeout(function() {
      playEl.src = './img/pausebuttonborderless.png';
      playEl.disabled = false;
    }, 1000);
  }
}

// TODO: create new event handler/listener that upon selection from a dropdown menu, it (1) stops sounds, (2) clears the allSounds, audioBufferSourceNodes, and gainNodes arrays; (3) renders new sounds based on selection, (4) changes the background video, and (5) calls a loading function that disables the play/pause button until the rendering is complete

//TODO: consider removing the enable event handler once a loading function is created

function startSounds() { // starts all audio assets
  if(localStorage.sliderValues) { // checks to see if sliderValues are in localStorage
    var unstringifiedSliderValues = localStorage.getItem('sliderValues'); // gets sliderValues from localStorage
    var unstringifiedGainValues = localStorage.getItem('gainValues'); // gets gainValues from localStorage
    var pulledSliderValues = JSON.parse(unstringifiedSliderValues); // parses sliderValues from localStorage
    var pulledGainValues = JSON.parse(unstringifiedGainValues); // parses gainValues from localStorage
  }
  for(var i = 0; i < allSounds.length; i++) {
    gainNodes[i] = audioContext.createGain(); // creates gain node for each audio asset
    audioBufferSourceNodes[i] = audioContext.createBufferSource(); // creates audio players
    audioBufferSourceNodes[i].buffer = allSounds[i].buffer; // assigns audio assets to buffers
    audioBufferSourceNodes[i].connect(gainNodes[i]).connect(audioContext.destination); // connects audio assets to volume controls and speakers
    audioBufferSourceNodes[i].loop = true; // ensures each audio asset will loop
    audioBufferSourceNodes[i].start(); // starts all audio assets
  }
  if(localStorage.sliderValues) { // checks to see if sliderValues are in localStorage
    for(var v = 0; v < allSounds.length; v++) {
      allSlidersEl[v].value = pulledSliderValues[v]; // assigns sliders sliderValues from localStorage
      mainSliderEl.value = pulledSliderValues[allSounds.length]; // assigns main slider sliderValue from localStorage
      gainNodes[v].gain.value = (pulledGainValues[v]); // assigns gainNodes gainValues from localStorage
    }
  } else {
    defaultGainValues();
  }
  playEl.removeEventListener('click', startSounds);
  playEl.addEventListener('click', stopSounds);
  playEl.src = './img/playbuttonborderless.png';
}

function stopSounds() { // stops all audio assets
  for(var i = 0; i <allSounds.length; i++) {
    audioBufferSourceNodes[i].stop();
  }
  playEl.removeEventListener('click', stopSounds);
  playEl.addEventListener('click', startSounds);
  playEl.src = './img/pausebuttonborderless.png';
}

function adjustVolume() {
  clearData();
  if(event.target.id === 'slider-1') { // stores new values for volumeDefault
    allSounds[0].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-2') {
    allSounds[1].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-3') {
    allSounds[2].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-4') {
    allSounds[3].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-5') {
    allSounds[4].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-6') {
    allSounds[5].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-7') {
    allSounds[6].volumeDefault = (event.target.value / 100) * (mainSliderEl.value / 100);
  } else if(event.target.id === 'slider-main') {
    for(var i = 0; i < allSounds.length; i ++) {
      allSounds[i].volumeDefault = (allSlidersEl[i].value / 100) * (mainSliderEl.value / 100);
    }
  }
  if(gainNodes.length > 0) { // checks to see if gainNodes have been generated
    for(var q = 0; q < allSounds.length; q++) { 
      gainNodes[q].gain.value = allSounds[q].volumeDefault; // takes values from volumeDefault and updates actual volume levels
    }
  }
  for(var v = 0; v < allSounds.length; v++) {
    sliderValues.push(allSlidersEl[v].value); // pushes to array that temporarily stores values for localStorage
    gainValues.push(allSounds[v].volumeDefault); // pushes to array that temporarily stores values for localStorage
  }
  sliderValues.push(mainSliderEl.value); // pushes to array that temporarily stores values for localStorage
  var stringifiedSliderValues = JSON.stringify(sliderValues);
  var stringifiedGainValues = JSON.stringify(gainValues);
  localStorage.setItem('sliderValues', stringifiedSliderValues);
  localStorage.setItem('gainValues', stringifiedGainValues);
}

// event listers

window.addEventListener('load', enable);
playEl.addEventListener('click', startSounds);
slidersEl.addEventListener('input', adjustVolume);

// executables

clearData();
renderDefaultSounds();

